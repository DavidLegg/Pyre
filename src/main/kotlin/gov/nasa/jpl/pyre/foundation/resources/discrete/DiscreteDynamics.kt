package gov.nasa.jpl.pyre.foundation.resources.discrete

import gov.nasa.jpl.pyre.utilities.InvertibleFunction
import gov.nasa.jpl.pyre.utilities.curry
import gov.nasa.jpl.pyre.kernel.Duration
import gov.nasa.jpl.pyre.kernel.Serialization.alias
import gov.nasa.jpl.pyre.foundation.resources.Dynamics
import gov.nasa.jpl.pyre.foundation.resources.DynamicsMonad
import gov.nasa.jpl.pyre.foundation.resources.FullDynamics
import gov.nasa.jpl.pyre.foundation.resources.MutableResource
import gov.nasa.jpl.pyre.foundation.resources.Resource
import gov.nasa.jpl.pyre.foundation.resources.ResourceMonad
import gov.nasa.jpl.pyre.foundation.resources.named
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable

@Serializable(with = Discrete.DiscreteSerializer::class)
data class Discrete<A>(val value: A) : Dynamics<A, Discrete<A>> {
    override fun value() = value
    override fun step(t: Duration) = this

    class DiscreteSerializer<A>(valueSerializer: KSerializer<A>) : KSerializer<Discrete<A>> by valueSerializer.alias(
        InvertibleFunction.of(
            ::Discrete,
            { it.value },
        )
    )
}

typealias DiscreteResource<V> = Resource<Discrete<V>>
typealias MutableDiscreteResource<V> = MutableResource<Discrete<V>>

@Suppress("NOTHING_TO_INLINE")
object DiscreteMonad {
    inline fun <A> pure(a: A): Discrete<A> = Discrete(a)
    inline fun <A, B> apply(a: Discrete<A>, fn: Discrete<(A) -> B>): Discrete<B> = Discrete(fn.value(a.value))
    inline fun <A> join(a: Discrete<Discrete<A>>): Discrete<A> = a.value
    // Although map can be defined in terms of apply and join, writing it this way instead makes it inlinable.
    // This can be a major boon to performance, so it's worth the redundant code
    inline fun <A, B> map(a: Discrete<A>, fn: (A) -> B): Discrete<B> = Discrete(fn(a.value))
    // Auxiliary methods - These are defined only in terms of pure/apply/join above, and can be copied from Monad to Monad
    inline fun <A, B> apply(fn: Discrete<(A) -> B>): (Discrete<A>) -> Discrete<B> = { apply(it, fn) }
    inline fun <A, B> map(crossinline fn: (A) -> B): (Discrete<A>) -> Discrete<B> = { map(it, fn) }
    inline fun <A, B> bind(a: Discrete<A>, crossinline fn: (A) -> Discrete<B>): Discrete<B> = join(map(a, fn))
    inline fun <A, B> bind(crossinline fn: (A) -> Discrete<B>): (Discrete<A>) -> Discrete<B> = { bind(it, fn) }
    // Auxiliary map
    inline fun <A, B, C> map(crossinline fn: (A, B) -> C): (Discrete<A>, Discrete<B>) -> Discrete<C> = { a, b -> map(a, b, fn) }
    inline fun <A, B, C> map(a: Discrete<A>, b: Discrete<B>, crossinline fn: (A, B) -> C): Discrete<C> = map(a, b, curry(fn))
    inline fun <A, B, C> map(a: Discrete<A>, b: Discrete<B>, crossinline fn: (A) -> (B) -> C): Discrete<C> = apply(b, map(a, fn))
    inline fun <A, B, C, D> map(crossinline fn: (A, B, C) -> D): (Discrete<A>, Discrete<B>, Discrete<C>) -> Discrete<D> = { a, b, c -> map(a, b, c, fn) }
    inline fun <A, B, C, D> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, crossinline fn: (A, B, C) -> D): Discrete<D> = map(a, b, c, curry(fn))
    inline fun <A, B, C, D> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, crossinline fn: (A) -> (B) -> (C) -> D): Discrete<D> = apply(c, map(a, b, fn))
    inline fun <A, B, C, D, E> map(crossinline fn: (A, B, C, D) -> E): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>) -> Discrete<E> = { a, b, c, d -> map(a, b, c, d, fn) }
    inline fun <A, B, C, D, E> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, crossinline fn: (A, B, C, D) -> E): Discrete<E> = map(a, b, c, d, curry(fn))
    inline fun <A, B, C, D, E> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, crossinline fn: (A) -> (B) -> (C) -> (D) -> E): Discrete<E> = apply(d, map(a, b, c, fn))
    inline fun <A, B, C, D, E, F> map(crossinline fn: (A, B, C, D, E) -> F): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>, Discrete<E>) -> Discrete<F> = { a, b, c, d, e -> map(a, b, c, d, e, fn) }
    inline fun <A, B, C, D, E, F> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, crossinline fn: (A, B, C, D, E) -> F): Discrete<F> = map(a, b, c, d, e, curry(fn))
    inline fun <A, B, C, D, E, F> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> F): Discrete<F> = apply(e, map(a, b, c, d, fn))
    inline fun <A, B, C, D, E, F, G> map(crossinline fn: (A, B, C, D, E, F) -> G): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>, Discrete<E>, Discrete<F>) -> Discrete<G> = { a, b, c, d, e, f -> map(a, b, c, d, e, f, fn) }
    inline fun <A, B, C, D, E, F, G> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, crossinline fn: (A, B, C, D, E, F) -> G): Discrete<G> = map(a, b, c, d, e, f, curry(fn))
    inline fun <A, B, C, D, E, F, G> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> G): Discrete<G> = apply(f, map(a, b, c, d, e, fn))
    inline fun <A, B, C, D, E, F, G, H> map(crossinline fn: (A, B, C, D, E, F, G) -> H): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>, Discrete<E>, Discrete<F>, Discrete<G>) -> Discrete<H> = { a, b, c, d, e, f, g -> map(a, b, c, d, e, f, g, fn) }
    inline fun <A, B, C, D, E, F, G, H> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, crossinline fn: (A, B, C, D, E, F, G) -> H): Discrete<H> = map(a, b, c, d, e, f, g, curry(fn))
    inline fun <A, B, C, D, E, F, G, H> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> H): Discrete<H> = apply(g, map(a, b, c, d, e, f, fn))
    inline fun <A, B, C, D, E, F, G, H, I> map(crossinline fn: (A, B, C, D, E, F, G, H) -> I): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>, Discrete<E>, Discrete<F>, Discrete<G>, Discrete<H>) -> Discrete<I> = { a, b, c, d, e, f, g, h -> map(a, b, c, d, e, f, g, h, fn) }
    inline fun <A, B, C, D, E, F, G, H, I> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, h: Discrete<H>, crossinline fn: (A, B, C, D, E, F, G, H) -> I): Discrete<I> = map(a, b, c, d, e, f, g, h, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, h: Discrete<H>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> I): Discrete<I> = apply(h, map(a, b, c, d, e, f, g, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> map(crossinline fn: (A, B, C, D, E, F, G, H, I) -> J): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>, Discrete<E>, Discrete<F>, Discrete<G>, Discrete<H>, Discrete<I>) -> Discrete<J> = { a, b, c, d, e, f, g, h, i -> map(a, b, c, d, e, f, g, h, i, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, h: Discrete<H>, i: Discrete<I>, crossinline fn: (A, B, C, D, E, F, G, H, I) -> J): Discrete<J> = map(a, b, c, d, e, f, g, h, i, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, h: Discrete<H>, i: Discrete<I>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> J): Discrete<J> = apply(i, map(a, b, c, d, e, f, g, h, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> map(crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> K): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>, Discrete<E>, Discrete<F>, Discrete<G>, Discrete<H>, Discrete<I>, Discrete<J>) -> Discrete<K> = { a, b, c, d, e, f, g, h, i, j -> map(a, b, c, d, e, f, g, h, i, j, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J, K> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, h: Discrete<H>, i: Discrete<I>, j: Discrete<J>, crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> K): Discrete<K> = map(a, b, c, d, e, f, g, h, i, j, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> map(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, h: Discrete<H>, i: Discrete<I>, j: Discrete<J>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> (J) -> K): Discrete<K> = apply(j, map(a, b, c, d, e, f, g, h, i, fn))
    // Auxiliary bind
    inline fun <A, B, C> bind(crossinline fn: (A, B) -> Discrete<C>): (Discrete<A>, Discrete<B>) -> Discrete<C> = { a, b -> bind(a, b, fn) }
    inline fun <A, B, C> bind(a: Discrete<A>, b: Discrete<B>, crossinline fn: (A, B) -> Discrete<C>): Discrete<C> = bind(a, b, curry(fn))
    inline fun <A, B, C> bind(a: Discrete<A>, b: Discrete<B>, crossinline fn: (A) -> (B) -> Discrete<C>): Discrete<C> = join(map(a, b, fn))
    inline fun <A, B, C, D> bind(crossinline fn: (A, B, C) -> Discrete<D>): (Discrete<A>, Discrete<B>, Discrete<C>) -> Discrete<D> = { a, b, c -> bind(a, b, c, fn) }
    inline fun <A, B, C, D> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, crossinline fn: (A, B, C) -> Discrete<D>): Discrete<D> = bind(a, b, c, curry(fn))
    inline fun <A, B, C, D> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, crossinline fn: (A) -> (B) -> (C) -> Discrete<D>): Discrete<D> = join(map(a, b, c, fn))
    inline fun <A, B, C, D, E> bind(crossinline fn: (A, B, C, D) -> Discrete<E>): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>) -> Discrete<E> = { a, b, c, d -> bind(a, b, c, d, fn) }
    inline fun <A, B, C, D, E> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, crossinline fn: (A, B, C, D) -> Discrete<E>): Discrete<E> = bind(a, b, c, d, curry(fn))
    inline fun <A, B, C, D, E> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, crossinline fn: (A) -> (B) -> (C) -> (D) -> Discrete<E>): Discrete<E> = join(map(a, b, c, d, fn))
    inline fun <A, B, C, D, E, F> bind(crossinline fn: (A, B, C, D, E) -> Discrete<F>): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>, Discrete<E>) -> Discrete<F> = { a, b, c, d, e -> bind(a, b, c, d, e, fn) }
    inline fun <A, B, C, D, E, F> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, crossinline fn: (A, B, C, D, E) -> Discrete<F>): Discrete<F> = bind(a, b, c, d, e, curry(fn))
    inline fun <A, B, C, D, E, F> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> Discrete<F>): Discrete<F> = join(map(a, b, c, d, e, fn))
    inline fun <A, B, C, D, E, F, G> bind(crossinline fn: (A, B, C, D, E, F) -> Discrete<G>): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>, Discrete<E>, Discrete<F>) -> Discrete<G> = { a, b, c, d, e, f -> bind(a, b, c, d, e, f, fn) }
    inline fun <A, B, C, D, E, F, G> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, crossinline fn: (A, B, C, D, E, F) -> Discrete<G>): Discrete<G> = bind(a, b, c, d, e, f, curry(fn))
    inline fun <A, B, C, D, E, F, G> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> Discrete<G>): Discrete<G> = join(map(a, b, c, d, e, f, fn))
    inline fun <A, B, C, D, E, F, G, H> bind(crossinline fn: (A, B, C, D, E, F, G) -> Discrete<H>): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>, Discrete<E>, Discrete<F>, Discrete<G>) -> Discrete<H> = { a, b, c, d, e, f, g -> bind(a, b, c, d, e, f, g, fn) }
    inline fun <A, B, C, D, E, F, G, H> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, crossinline fn: (A, B, C, D, E, F, G) -> Discrete<H>): Discrete<H> = bind(a, b, c, d, e, f, g, curry(fn))
    inline fun <A, B, C, D, E, F, G, H> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> Discrete<H>): Discrete<H> = join(map(a, b, c, d, e, f, g, fn))
    inline fun <A, B, C, D, E, F, G, H, I> bind(crossinline fn: (A, B, C, D, E, F, G, H) -> Discrete<I>): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>, Discrete<E>, Discrete<F>, Discrete<G>, Discrete<H>) -> Discrete<I> = { a, b, c, d, e, f, g, h -> bind(a, b, c, d, e, f, g, h, fn) }
    inline fun <A, B, C, D, E, F, G, H, I> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, h: Discrete<H>, crossinline fn: (A, B, C, D, E, F, G, H) -> Discrete<I>): Discrete<I> = bind(a, b, c, d, e, f, g, h, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, h: Discrete<H>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> Discrete<I>): Discrete<I> = join(map(a, b, c, d, e, f, g, h, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> bind(crossinline fn: (A, B, C, D, E, F, G, H, I) -> Discrete<J>): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>, Discrete<E>, Discrete<F>, Discrete<G>, Discrete<H>, Discrete<I>) -> Discrete<J> = { a, b, c, d, e, f, g, h, i -> bind(a, b, c, d, e, f, g, h, i, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, h: Discrete<H>, i: Discrete<I>, crossinline fn: (A, B, C, D, E, F, G, H, I) -> Discrete<J>): Discrete<J> = bind(a, b, c, d, e, f, g, h, i, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, h: Discrete<H>, i: Discrete<I>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> Discrete<J>): Discrete<J> = join(map(a, b, c, d, e, f, g, h, i, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> bind(crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> Discrete<K>): (Discrete<A>, Discrete<B>, Discrete<C>, Discrete<D>, Discrete<E>, Discrete<F>, Discrete<G>, Discrete<H>, Discrete<I>, Discrete<J>) -> Discrete<K> = { a, b, c, d, e, f, g, h, i, j -> bind(a, b, c, d, e, f, g, h, i, j, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J, K> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, h: Discrete<H>, i: Discrete<I>, j: Discrete<J>, crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> Discrete<K>): Discrete<K> = bind(a, b, c, d, e, f, g, h, i, j, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> bind(a: Discrete<A>, b: Discrete<B>, c: Discrete<C>, d: Discrete<D>, e: Discrete<E>, f: Discrete<F>, g: Discrete<G>, h: Discrete<H>, i: Discrete<I>, j: Discrete<J>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> (J) -> Discrete<K>): Discrete<K> = join(map(a, b, c, d, e, f, g, h, i, j, fn))
}

@Suppress("NOTHING_TO_INLINE")
object DiscreteDynamicsMonad {
    inline fun <A> pure(a: A): FullDynamics<Discrete<A>> = DynamicsMonad.pure(DiscreteMonad.pure(a))
    inline fun <A, B> apply(a: FullDynamics<Discrete<A>>, fn: FullDynamics<Discrete<(A) -> B>>): FullDynamics<Discrete<B>> =
        DynamicsMonad.apply(a, DynamicsMonad.map(fn, DiscreteMonad::apply))
    inline fun <A> distribute(a: Discrete<FullDynamics<A>>): FullDynamics<Discrete<A>> =
        DynamicsMonad.map(a.value, DiscreteMonad::pure)
    inline fun <A> join(a: FullDynamics<Discrete<FullDynamics<Discrete<A>>>>): FullDynamics<Discrete<A>> =
        DynamicsMonad.map(DynamicsMonad.join(DynamicsMonad.map(a, DiscreteDynamicsMonad::distribute)), DiscreteMonad::join)
    // Although map can be defined in terms of apply and join, writing it this way instead makes it inlinable.
    // This can be a major boon to performance, so it's worth the redundant code
    inline fun <A, B> map(a: FullDynamics<Discrete<A>>, crossinline fn: (A) -> B): FullDynamics<Discrete<B>> =
        DynamicsMonad.map(a, DiscreteMonad.map(fn))
    // Auxiliary methods - These are defined only in terms of pure/apply/join above, and can be copied from Monad to Monad
    inline fun <A, B> apply(fn: FullDynamics<Discrete<(A) -> B>>): (FullDynamics<Discrete<A>>) -> FullDynamics<Discrete<B>> = { apply(it, fn) }
    inline fun <A, B> map(crossinline fn: (A) -> B): (FullDynamics<Discrete<A>>) -> FullDynamics<Discrete<B>> = { map(it, fn) }
    inline fun <A, B> bind(a: FullDynamics<Discrete<A>>, crossinline fn: (A) -> FullDynamics<Discrete<B>>): FullDynamics<Discrete<B>> = join(map(a, fn))
    inline fun <A, B> bind(crossinline fn: (A) -> FullDynamics<Discrete<B>>): (FullDynamics<Discrete<A>>) -> FullDynamics<Discrete<B>> = { bind(it, fn) }
    // Auxiliary map
    inline fun <A, B, C> map(crossinline fn: (A, B) -> C): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>) -> FullDynamics<Discrete<C>> = { a, b -> map(a, b, fn) }
    inline fun <A, B, C> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, crossinline fn: (A, B) -> C): FullDynamics<Discrete<C>> = map(a, b, curry(fn))
    inline fun <A, B, C> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, crossinline fn: (A) -> (B) -> C): FullDynamics<Discrete<C>> = apply(b, map(a, fn))
    inline fun <A, B, C, D> map(crossinline fn: (A, B, C) -> D): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>) -> FullDynamics<Discrete<D>> = { a, b, c -> map(a, b, c, fn) }
    inline fun <A, B, C, D> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, crossinline fn: (A, B, C) -> D): FullDynamics<Discrete<D>> = map(a, b, c, curry(fn))
    inline fun <A, B, C, D> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, crossinline fn: (A) -> (B) -> (C) -> D): FullDynamics<Discrete<D>> = apply(c, map(a, b, fn))
    inline fun <A, B, C, D, E> map(crossinline fn: (A, B, C, D) -> E): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>) -> FullDynamics<Discrete<E>> = { a, b, c, d -> map(a, b, c, d, fn) }
    inline fun <A, B, C, D, E> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, crossinline fn: (A, B, C, D) -> E): FullDynamics<Discrete<E>> = map(a, b, c, d, curry(fn))
    inline fun <A, B, C, D, E> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> E): FullDynamics<Discrete<E>> = apply(d, map(a, b, c, fn))
    inline fun <A, B, C, D, E, F> map(crossinline fn: (A, B, C, D, E) -> F): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>, FullDynamics<Discrete<E>>) -> FullDynamics<Discrete<F>> = { a, b, c, d, e -> map(a, b, c, d, e, fn) }
    inline fun <A, B, C, D, E, F> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, crossinline fn: (A, B, C, D, E) -> F): FullDynamics<Discrete<F>> = map(a, b, c, d, e, curry(fn))
    inline fun <A, B, C, D, E, F> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> F): FullDynamics<Discrete<F>> = apply(e, map(a, b, c, d, fn))
    inline fun <A, B, C, D, E, F, G> map(crossinline fn: (A, B, C, D, E, F) -> G): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>, FullDynamics<Discrete<E>>, FullDynamics<Discrete<F>>) -> FullDynamics<Discrete<G>> = { a, b, c, d, e, f -> map(a, b, c, d, e, f, fn) }
    inline fun <A, B, C, D, E, F, G> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, crossinline fn: (A, B, C, D, E, F) -> G): FullDynamics<Discrete<G>> = map(a, b, c, d, e, f, curry(fn))
    inline fun <A, B, C, D, E, F, G> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> G): FullDynamics<Discrete<G>> = apply(f, map(a, b, c, d, e, fn))
    inline fun <A, B, C, D, E, F, G, H> map(crossinline fn: (A, B, C, D, E, F, G) -> H): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>, FullDynamics<Discrete<E>>, FullDynamics<Discrete<F>>, FullDynamics<Discrete<G>>) -> FullDynamics<Discrete<H>> = { a, b, c, d, e, f, g -> map(a, b, c, d, e, f, g, fn) }
    inline fun <A, B, C, D, E, F, G, H> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, crossinline fn: (A, B, C, D, E, F, G) -> H): FullDynamics<Discrete<H>> = map(a, b, c, d, e, f, g, curry(fn))
    inline fun <A, B, C, D, E, F, G, H> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> H): FullDynamics<Discrete<H>> = apply(g, map(a, b, c, d, e, f, fn))
    inline fun <A, B, C, D, E, F, G, H, I> map(crossinline fn: (A, B, C, D, E, F, G, H) -> I): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>, FullDynamics<Discrete<E>>, FullDynamics<Discrete<F>>, FullDynamics<Discrete<G>>, FullDynamics<Discrete<H>>) -> FullDynamics<Discrete<I>> = { a, b, c, d, e, f, g, h -> map(a, b, c, d, e, f, g, h, fn) }
    inline fun <A, B, C, D, E, F, G, H, I> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, h: FullDynamics<Discrete<H>>, crossinline fn: (A, B, C, D, E, F, G, H) -> I): FullDynamics<Discrete<I>> = map(a, b, c, d, e, f, g, h, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, h: FullDynamics<Discrete<H>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> I): FullDynamics<Discrete<I>> = apply(h, map(a, b, c, d, e, f, g, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> map(crossinline fn: (A, B, C, D, E, F, G, H, I) -> J): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>, FullDynamics<Discrete<E>>, FullDynamics<Discrete<F>>, FullDynamics<Discrete<G>>, FullDynamics<Discrete<H>>, FullDynamics<Discrete<I>>) -> FullDynamics<Discrete<J>> = { a, b, c, d, e, f, g, h, i -> map(a, b, c, d, e, f, g, h, i, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, h: FullDynamics<Discrete<H>>, i: FullDynamics<Discrete<I>>, crossinline fn: (A, B, C, D, E, F, G, H, I) -> J): FullDynamics<Discrete<J>> = map(a, b, c, d, e, f, g, h, i, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, h: FullDynamics<Discrete<H>>, i: FullDynamics<Discrete<I>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> J): FullDynamics<Discrete<J>> = apply(i, map(a, b, c, d, e, f, g, h, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> map(crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> K): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>, FullDynamics<Discrete<E>>, FullDynamics<Discrete<F>>, FullDynamics<Discrete<G>>, FullDynamics<Discrete<H>>, FullDynamics<Discrete<I>>, FullDynamics<Discrete<J>>) -> FullDynamics<Discrete<K>> = { a, b, c, d, e, f, g, h, i, j -> map(a, b, c, d, e, f, g, h, i, j, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J, K> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, h: FullDynamics<Discrete<H>>, i: FullDynamics<Discrete<I>>, j: FullDynamics<Discrete<J>>, crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> K): FullDynamics<Discrete<K>> = map(a, b, c, d, e, f, g, h, i, j, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> map(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, h: FullDynamics<Discrete<H>>, i: FullDynamics<Discrete<I>>, j: FullDynamics<Discrete<J>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> (J) -> K): FullDynamics<Discrete<K>> = apply(j, map(a, b, c, d, e, f, g, h, i, fn))
    // Auxiliary bind
    inline fun <A, B, C> bind(crossinline fn: (A, B) -> FullDynamics<Discrete<C>>): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>) -> FullDynamics<Discrete<C>> = { a, b -> bind(a, b, fn) }
    inline fun <A, B, C> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, crossinline fn: (A, B) -> FullDynamics<Discrete<C>>): FullDynamics<Discrete<C>> = bind(a, b, curry(fn))
    inline fun <A, B, C> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, crossinline fn: (A) -> (B) -> FullDynamics<Discrete<C>>): FullDynamics<Discrete<C>> = join(map(a, b, fn))
    inline fun <A, B, C, D> bind(crossinline fn: (A, B, C) -> FullDynamics<Discrete<D>>): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>) -> FullDynamics<Discrete<D>> = { a, b, c -> bind(a, b, c, fn) }
    inline fun <A, B, C, D> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, crossinline fn: (A, B, C) -> FullDynamics<Discrete<D>>): FullDynamics<Discrete<D>> = bind(a, b, c, curry(fn))
    inline fun <A, B, C, D> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, crossinline fn: (A) -> (B) -> (C) -> FullDynamics<Discrete<D>>): FullDynamics<Discrete<D>> = join(map(a, b, c, fn))
    inline fun <A, B, C, D, E> bind(crossinline fn: (A, B, C, D) -> FullDynamics<Discrete<E>>): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>) -> FullDynamics<Discrete<E>> = { a, b, c, d -> bind(a, b, c, d, fn) }
    inline fun <A, B, C, D, E> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, crossinline fn: (A, B, C, D) -> FullDynamics<Discrete<E>>): FullDynamics<Discrete<E>> = bind(a, b, c, d, curry(fn))
    inline fun <A, B, C, D, E> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> FullDynamics<Discrete<E>>): FullDynamics<Discrete<E>> = join(map(a, b, c, d, fn))
    inline fun <A, B, C, D, E, F> bind(crossinline fn: (A, B, C, D, E) -> FullDynamics<Discrete<F>>): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>, FullDynamics<Discrete<E>>) -> FullDynamics<Discrete<F>> = { a, b, c, d, e -> bind(a, b, c, d, e, fn) }
    inline fun <A, B, C, D, E, F> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, crossinline fn: (A, B, C, D, E) -> FullDynamics<Discrete<F>>): FullDynamics<Discrete<F>> = bind(a, b, c, d, e, curry(fn))
    inline fun <A, B, C, D, E, F> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> FullDynamics<Discrete<F>>): FullDynamics<Discrete<F>> = join(map(a, b, c, d, e, fn))
    inline fun <A, B, C, D, E, F, G> bind(crossinline fn: (A, B, C, D, E, F) -> FullDynamics<Discrete<G>>): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>, FullDynamics<Discrete<E>>, FullDynamics<Discrete<F>>) -> FullDynamics<Discrete<G>> = { a, b, c, d, e, f -> bind(a, b, c, d, e, f, fn) }
    inline fun <A, B, C, D, E, F, G> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, crossinline fn: (A, B, C, D, E, F) -> FullDynamics<Discrete<G>>): FullDynamics<Discrete<G>> = bind(a, b, c, d, e, f, curry(fn))
    inline fun <A, B, C, D, E, F, G> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> FullDynamics<Discrete<G>>): FullDynamics<Discrete<G>> = join(map(a, b, c, d, e, f, fn))
    inline fun <A, B, C, D, E, F, G, H> bind(crossinline fn: (A, B, C, D, E, F, G) -> FullDynamics<Discrete<H>>): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>, FullDynamics<Discrete<E>>, FullDynamics<Discrete<F>>, FullDynamics<Discrete<G>>) -> FullDynamics<Discrete<H>> = { a, b, c, d, e, f, g -> bind(a, b, c, d, e, f, g, fn) }
    inline fun <A, B, C, D, E, F, G, H> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, crossinline fn: (A, B, C, D, E, F, G) -> FullDynamics<Discrete<H>>): FullDynamics<Discrete<H>> = bind(a, b, c, d, e, f, g, curry(fn))
    inline fun <A, B, C, D, E, F, G, H> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> FullDynamics<Discrete<H>>): FullDynamics<Discrete<H>> = join(map(a, b, c, d, e, f, g, fn))
    inline fun <A, B, C, D, E, F, G, H, I> bind(crossinline fn: (A, B, C, D, E, F, G, H) -> FullDynamics<Discrete<I>>): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>, FullDynamics<Discrete<E>>, FullDynamics<Discrete<F>>, FullDynamics<Discrete<G>>, FullDynamics<Discrete<H>>) -> FullDynamics<Discrete<I>> = { a, b, c, d, e, f, g, h -> bind(a, b, c, d, e, f, g, h, fn) }
    inline fun <A, B, C, D, E, F, G, H, I> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, h: FullDynamics<Discrete<H>>, crossinline fn: (A, B, C, D, E, F, G, H) -> FullDynamics<Discrete<I>>): FullDynamics<Discrete<I>> = bind(a, b, c, d, e, f, g, h, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, h: FullDynamics<Discrete<H>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> FullDynamics<Discrete<I>>): FullDynamics<Discrete<I>> = join(map(a, b, c, d, e, f, g, h, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> bind(crossinline fn: (A, B, C, D, E, F, G, H, I) -> FullDynamics<Discrete<J>>): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>, FullDynamics<Discrete<E>>, FullDynamics<Discrete<F>>, FullDynamics<Discrete<G>>, FullDynamics<Discrete<H>>, FullDynamics<Discrete<I>>) -> FullDynamics<Discrete<J>> = { a, b, c, d, e, f, g, h, i -> bind(a, b, c, d, e, f, g, h, i, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, h: FullDynamics<Discrete<H>>, i: FullDynamics<Discrete<I>>, crossinline fn: (A, B, C, D, E, F, G, H, I) -> FullDynamics<Discrete<J>>): FullDynamics<Discrete<J>> = bind(a, b, c, d, e, f, g, h, i, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, h: FullDynamics<Discrete<H>>, i: FullDynamics<Discrete<I>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> FullDynamics<Discrete<J>>): FullDynamics<Discrete<J>> = join(map(a, b, c, d, e, f, g, h, i, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> bind(crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> FullDynamics<Discrete<K>>): (FullDynamics<Discrete<A>>, FullDynamics<Discrete<B>>, FullDynamics<Discrete<C>>, FullDynamics<Discrete<D>>, FullDynamics<Discrete<E>>, FullDynamics<Discrete<F>>, FullDynamics<Discrete<G>>, FullDynamics<Discrete<H>>, FullDynamics<Discrete<I>>, FullDynamics<Discrete<J>>) -> FullDynamics<Discrete<K>> = { a, b, c, d, e, f, g, h, i, j -> bind(a, b, c, d, e, f, g, h, i, j, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J, K> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, h: FullDynamics<Discrete<H>>, i: FullDynamics<Discrete<I>>, j: FullDynamics<Discrete<J>>, crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> FullDynamics<Discrete<K>>): FullDynamics<Discrete<K>> = bind(a, b, c, d, e, f, g, h, i, j, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> bind(a: FullDynamics<Discrete<A>>, b: FullDynamics<Discrete<B>>, c: FullDynamics<Discrete<C>>, d: FullDynamics<Discrete<D>>, e: FullDynamics<Discrete<E>>, f: FullDynamics<Discrete<F>>, g: FullDynamics<Discrete<G>>, h: FullDynamics<Discrete<H>>, i: FullDynamics<Discrete<I>>, j: FullDynamics<Discrete<J>>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> (J) -> FullDynamics<Discrete<K>>): FullDynamics<Discrete<K>> = join(map(a, b, c, d, e, f, g, h, i, j, fn))
}

@Suppress("NOTHING_TO_INLINE")
object DiscreteResourceMonad {
    inline fun <A> pure(a: A): DiscreteResource<A> = ResourceMonad.pure(DiscreteMonad.pure(a)) named { a.toString() }
    inline fun <A, B> apply(a: DiscreteResource<A>, fn: DiscreteResource<(A) -> B>): DiscreteResource<B> =
        ResourceMonad.apply(a, ResourceMonad.map(fn, DiscreteMonad::apply))
    inline fun <A> distribute(a: Discrete<Resource<A>>): DiscreteResource<A> =
        ResourceMonad.map(a.value, DiscreteMonad::pure)
    inline fun <A> join(a: DiscreteResource<DiscreteResource<A>>): DiscreteResource<A> =
        ResourceMonad.map(ResourceMonad.join(ResourceMonad.map(a, DiscreteResourceMonad::distribute)), DiscreteMonad::join)
    // Although map can be defined in terms of apply and join, writing it this way instead makes it inlinable.
    // This can be a major boon to performance, so it's worth the redundant code
    inline fun <A, B> map(a: DiscreteResource<A>, crossinline fn: (A) -> B): DiscreteResource<B> =
        ResourceMonad.map(a, DiscreteMonad.map(fn))
    // Auxiliary methods - These are defined only in terms of pure/apply/join above, and can be copied from Monad to Monad
    inline fun <A, B> apply(fn: DiscreteResource<(A) -> B>): (DiscreteResource<A>) -> DiscreteResource<B> = { apply(it, fn) }
    inline fun <A, B> map(crossinline fn: (A) -> B): (DiscreteResource<A>) -> DiscreteResource<B> = { map(it, fn) }
    inline fun <A, B> bind(a: DiscreteResource<A>, crossinline fn: (A) -> DiscreteResource<B>): DiscreteResource<B> = join(map(a, fn))
    inline fun <A, B> bind(crossinline fn: (A) -> DiscreteResource<B>): (DiscreteResource<A>) -> DiscreteResource<B> = { bind(it, fn) }
    // Auxiliary map
    inline fun <A, B, C> map(crossinline fn: (A, B) -> C): (DiscreteResource<A>, DiscreteResource<B>) -> DiscreteResource<C> = { a, b -> map(a, b, fn) }
    inline fun <A, B, C> map(a: DiscreteResource<A>, b: DiscreteResource<B>, crossinline fn: (A, B) -> C): DiscreteResource<C> = map(a, b, curry(fn))
    inline fun <A, B, C> map(a: DiscreteResource<A>, b: DiscreteResource<B>, crossinline fn: (A) -> (B) -> C): DiscreteResource<C> = apply(b, map(a, fn))
    inline fun <A, B, C, D> map(crossinline fn: (A, B, C) -> D): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>) -> DiscreteResource<D> = { a, b, c -> map(a, b, c, fn) }
    inline fun <A, B, C, D> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, crossinline fn: (A, B, C) -> D): DiscreteResource<D> = map(a, b, c, curry(fn))
    inline fun <A, B, C, D> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, crossinline fn: (A) -> (B) -> (C) -> D): DiscreteResource<D> = apply(c, map(a, b, fn))
    inline fun <A, B, C, D, E> map(crossinline fn: (A, B, C, D) -> E): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>) -> DiscreteResource<E> = { a, b, c, d -> map(a, b, c, d, fn) }
    inline fun <A, B, C, D, E> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, crossinline fn: (A, B, C, D) -> E): DiscreteResource<E> = map(a, b, c, d, curry(fn))
    inline fun <A, B, C, D, E> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, crossinline fn: (A) -> (B) -> (C) -> (D) -> E): DiscreteResource<E> = apply(d, map(a, b, c, fn))
    inline fun <A, B, C, D, E, F> map(crossinline fn: (A, B, C, D, E) -> F): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>, DiscreteResource<E>) -> DiscreteResource<F> = { a, b, c, d, e -> map(a, b, c, d, e, fn) }
    inline fun <A, B, C, D, E, F> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, crossinline fn: (A, B, C, D, E) -> F): DiscreteResource<F> = map(a, b, c, d, e, curry(fn))
    inline fun <A, B, C, D, E, F> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> F): DiscreteResource<F> = apply(e, map(a, b, c, d, fn))
    inline fun <A, B, C, D, E, F, G> map(crossinline fn: (A, B, C, D, E, F) -> G): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>, DiscreteResource<E>, DiscreteResource<F>) -> DiscreteResource<G> = { a, b, c, d, e, f -> map(a, b, c, d, e, f, fn) }
    inline fun <A, B, C, D, E, F, G> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, crossinline fn: (A, B, C, D, E, F) -> G): DiscreteResource<G> = map(a, b, c, d, e, f, curry(fn))
    inline fun <A, B, C, D, E, F, G> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> G): DiscreteResource<G> = apply(f, map(a, b, c, d, e, fn))
    inline fun <A, B, C, D, E, F, G, H> map(crossinline fn: (A, B, C, D, E, F, G) -> H): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>, DiscreteResource<E>, DiscreteResource<F>, DiscreteResource<G>) -> DiscreteResource<H> = { a, b, c, d, e, f, g -> map(a, b, c, d, e, f, g, fn) }
    inline fun <A, B, C, D, E, F, G, H> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, crossinline fn: (A, B, C, D, E, F, G) -> H): DiscreteResource<H> = map(a, b, c, d, e, f, g, curry(fn))
    inline fun <A, B, C, D, E, F, G, H> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> H): DiscreteResource<H> = apply(g, map(a, b, c, d, e, f, fn))
    inline fun <A, B, C, D, E, F, G, H, I> map(crossinline fn: (A, B, C, D, E, F, G, H) -> I): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>, DiscreteResource<E>, DiscreteResource<F>, DiscreteResource<G>, DiscreteResource<H>) -> DiscreteResource<I> = { a, b, c, d, e, f, g, h -> map(a, b, c, d, e, f, g, h, fn) }
    inline fun <A, B, C, D, E, F, G, H, I> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, h: DiscreteResource<H>, crossinline fn: (A, B, C, D, E, F, G, H) -> I): DiscreteResource<I> = map(a, b, c, d, e, f, g, h, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, h: DiscreteResource<H>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> I): DiscreteResource<I> = apply(h, map(a, b, c, d, e, f, g, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> map(crossinline fn: (A, B, C, D, E, F, G, H, I) -> J): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>, DiscreteResource<E>, DiscreteResource<F>, DiscreteResource<G>, DiscreteResource<H>, DiscreteResource<I>) -> DiscreteResource<J> = { a, b, c, d, e, f, g, h, i -> map(a, b, c, d, e, f, g, h, i, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, h: DiscreteResource<H>, i: DiscreteResource<I>, crossinline fn: (A, B, C, D, E, F, G, H, I) -> J): DiscreteResource<J> = map(a, b, c, d, e, f, g, h, i, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, h: DiscreteResource<H>, i: DiscreteResource<I>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> J): DiscreteResource<J> = apply(i, map(a, b, c, d, e, f, g, h, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> map(crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> K): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>, DiscreteResource<E>, DiscreteResource<F>, DiscreteResource<G>, DiscreteResource<H>, DiscreteResource<I>, DiscreteResource<J>) -> DiscreteResource<K> = { a, b, c, d, e, f, g, h, i, j -> map(a, b, c, d, e, f, g, h, i, j, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J, K> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, h: DiscreteResource<H>, i: DiscreteResource<I>, j: DiscreteResource<J>, crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> K): DiscreteResource<K> = map(a, b, c, d, e, f, g, h, i, j, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> map(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, h: DiscreteResource<H>, i: DiscreteResource<I>, j: DiscreteResource<J>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> (J) -> K): DiscreteResource<K> = apply(j, map(a, b, c, d, e, f, g, h, i, fn))
    // Auxiliary bind
    inline fun <A, B, C> bind(crossinline fn: (A, B) -> DiscreteResource<C>): (DiscreteResource<A>, DiscreteResource<B>) -> DiscreteResource<C> = { a, b -> bind(a, b, fn) }
    inline fun <A, B, C> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, crossinline fn: (A, B) -> DiscreteResource<C>): DiscreteResource<C> = bind(a, b, curry(fn))
    inline fun <A, B, C> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, crossinline fn: (A) -> (B) -> DiscreteResource<C>): DiscreteResource<C> = join(map(a, b, fn))
    inline fun <A, B, C, D> bind(crossinline fn: (A, B, C) -> DiscreteResource<D>): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>) -> DiscreteResource<D> = { a, b, c -> bind(a, b, c, fn) }
    inline fun <A, B, C, D> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, crossinline fn: (A, B, C) -> DiscreteResource<D>): DiscreteResource<D> = bind(a, b, c, curry(fn))
    inline fun <A, B, C, D> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, crossinline fn: (A) -> (B) -> (C) -> DiscreteResource<D>): DiscreteResource<D> = join(map(a, b, c, fn))
    inline fun <A, B, C, D, E> bind(crossinline fn: (A, B, C, D) -> DiscreteResource<E>): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>) -> DiscreteResource<E> = { a, b, c, d -> bind(a, b, c, d, fn) }
    inline fun <A, B, C, D, E> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, crossinline fn: (A, B, C, D) -> DiscreteResource<E>): DiscreteResource<E> = bind(a, b, c, d, curry(fn))
    inline fun <A, B, C, D, E> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, crossinline fn: (A) -> (B) -> (C) -> (D) -> DiscreteResource<E>): DiscreteResource<E> = join(map(a, b, c, d, fn))
    inline fun <A, B, C, D, E, F> bind(crossinline fn: (A, B, C, D, E) -> DiscreteResource<F>): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>, DiscreteResource<E>) -> DiscreteResource<F> = { a, b, c, d, e -> bind(a, b, c, d, e, fn) }
    inline fun <A, B, C, D, E, F> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, crossinline fn: (A, B, C, D, E) -> DiscreteResource<F>): DiscreteResource<F> = bind(a, b, c, d, e, curry(fn))
    inline fun <A, B, C, D, E, F> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> DiscreteResource<F>): DiscreteResource<F> = join(map(a, b, c, d, e, fn))
    inline fun <A, B, C, D, E, F, G> bind(crossinline fn: (A, B, C, D, E, F) -> DiscreteResource<G>): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>, DiscreteResource<E>, DiscreteResource<F>) -> DiscreteResource<G> = { a, b, c, d, e, f -> bind(a, b, c, d, e, f, fn) }
    inline fun <A, B, C, D, E, F, G> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, crossinline fn: (A, B, C, D, E, F) -> DiscreteResource<G>): DiscreteResource<G> = bind(a, b, c, d, e, f, curry(fn))
    inline fun <A, B, C, D, E, F, G> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> DiscreteResource<G>): DiscreteResource<G> = join(map(a, b, c, d, e, f, fn))
    inline fun <A, B, C, D, E, F, G, H> bind(crossinline fn: (A, B, C, D, E, F, G) -> DiscreteResource<H>): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>, DiscreteResource<E>, DiscreteResource<F>, DiscreteResource<G>) -> DiscreteResource<H> = { a, b, c, d, e, f, g -> bind(a, b, c, d, e, f, g, fn) }
    inline fun <A, B, C, D, E, F, G, H> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, crossinline fn: (A, B, C, D, E, F, G) -> DiscreteResource<H>): DiscreteResource<H> = bind(a, b, c, d, e, f, g, curry(fn))
    inline fun <A, B, C, D, E, F, G, H> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> DiscreteResource<H>): DiscreteResource<H> = join(map(a, b, c, d, e, f, g, fn))
    inline fun <A, B, C, D, E, F, G, H, I> bind(crossinline fn: (A, B, C, D, E, F, G, H) -> DiscreteResource<I>): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>, DiscreteResource<E>, DiscreteResource<F>, DiscreteResource<G>, DiscreteResource<H>) -> DiscreteResource<I> = { a, b, c, d, e, f, g, h -> bind(a, b, c, d, e, f, g, h, fn) }
    inline fun <A, B, C, D, E, F, G, H, I> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, h: DiscreteResource<H>, crossinline fn: (A, B, C, D, E, F, G, H) -> DiscreteResource<I>): DiscreteResource<I> = bind(a, b, c, d, e, f, g, h, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, h: DiscreteResource<H>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> DiscreteResource<I>): DiscreteResource<I> = join(map(a, b, c, d, e, f, g, h, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> bind(crossinline fn: (A, B, C, D, E, F, G, H, I) -> DiscreteResource<J>): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>, DiscreteResource<E>, DiscreteResource<F>, DiscreteResource<G>, DiscreteResource<H>, DiscreteResource<I>) -> DiscreteResource<J> = { a, b, c, d, e, f, g, h, i -> bind(a, b, c, d, e, f, g, h, i, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, h: DiscreteResource<H>, i: DiscreteResource<I>, crossinline fn: (A, B, C, D, E, F, G, H, I) -> DiscreteResource<J>): DiscreteResource<J> = bind(a, b, c, d, e, f, g, h, i, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, h: DiscreteResource<H>, i: DiscreteResource<I>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> DiscreteResource<J>): DiscreteResource<J> = join(map(a, b, c, d, e, f, g, h, i, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> bind(crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> DiscreteResource<K>): (DiscreteResource<A>, DiscreteResource<B>, DiscreteResource<C>, DiscreteResource<D>, DiscreteResource<E>, DiscreteResource<F>, DiscreteResource<G>, DiscreteResource<H>, DiscreteResource<I>, DiscreteResource<J>) -> DiscreteResource<K> = { a, b, c, d, e, f, g, h, i, j -> bind(a, b, c, d, e, f, g, h, i, j, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J, K> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, h: DiscreteResource<H>, i: DiscreteResource<I>, j: DiscreteResource<J>, crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> DiscreteResource<K>): DiscreteResource<K> = bind(a, b, c, d, e, f, g, h, i, j, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> bind(a: DiscreteResource<A>, b: DiscreteResource<B>, c: DiscreteResource<C>, d: DiscreteResource<D>, e: DiscreteResource<E>, f: DiscreteResource<F>, g: DiscreteResource<G>, h: DiscreteResource<H>, i: DiscreteResource<I>, j: DiscreteResource<J>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> (J) -> DiscreteResource<K>): DiscreteResource<K> = join(map(a, b, c, d, e, f, g, h, i, j, fn))
}
