package gov.nasa.jpl.pyre.flame.results.profiles.discrete

import gov.nasa.jpl.pyre.coals.curry
import gov.nasa.jpl.pyre.flame.results.profiles.Profile
import gov.nasa.jpl.pyre.flame.results.profiles.Profile.ProfileMonad
import gov.nasa.jpl.pyre.spark.resources.discrete.Discrete
import gov.nasa.jpl.pyre.spark.resources.discrete.DiscreteMonad

typealias DiscreteProfile<T> = Profile<Discrete<T>>

@Suppress("NOTHING_TO_INLINE")
object DiscreteProfileMonad {
    inline fun <A> pure(a: A): DiscreteProfile<A> = ProfileMonad.pure(DiscreteMonad.pure(a))
    inline fun <A, B> apply(a: DiscreteProfile<A>, fn: DiscreteProfile<(A) -> B>): DiscreteProfile<B> =
        ProfileMonad.map(a, fn, DiscreteMonad::apply)
    // Can't write distribute because Profile requires a dynamics type arg, can't accept a general "A"
    // Instead, we can write this join operator, particular to Discrete profiles
    inline fun <A> join(a: DiscreteProfile<DiscreteProfile<A>>): DiscreteProfile<A> =
        ProfileMonad.join(ProfileMonad.map(a) { it.value })
    // Although map can be defined in terms of apply and join, writing it this way instead makes it inlinable.
    // This can be a major boon to performance, so it's worth the redundant code
    inline fun <A, B> map(a: DiscreteProfile<A>, crossinline fn: (A) -> B): DiscreteProfile<B> =
        ProfileMonad.map(a, DiscreteMonad.map(fn))
    // Auxiliary methods - These are defined only in terms of pure/apply/join above, and can be copied from Monad to Monad
    inline fun <A, B> apply(fn: DiscreteProfile<(A) -> B>): (DiscreteProfile<A>) -> DiscreteProfile<B> = { apply(it, fn) }
    inline fun <A, B> map(crossinline fn: (A) -> B): (DiscreteProfile<A>) -> DiscreteProfile<B> = { map(it, fn) }
    inline fun <A, B> bind(a: DiscreteProfile<A>, crossinline fn: (A) -> DiscreteProfile<B>): DiscreteProfile<B> = join(map(a, fn))
    inline fun <A, B> bind(crossinline fn: (A) -> DiscreteProfile<B>): (DiscreteProfile<A>) -> DiscreteProfile<B> = { bind(it, fn) }
    // Auxiliary map
    inline fun <A, B, C> map(crossinline fn: (A, B) -> C): (DiscreteProfile<A>, DiscreteProfile<B>) -> DiscreteProfile<C> = { a, b -> map(a, b, fn) }
    inline fun <A, B, C> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, crossinline fn: (A, B) -> C): DiscreteProfile<C> = map(a, b, curry(fn))
    inline fun <A, B, C> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, crossinline fn: (A) -> (B) -> C): DiscreteProfile<C> = apply(b, map(a, fn))
    inline fun <A, B, C, D> map(crossinline fn: (A, B, C) -> D): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>) -> DiscreteProfile<D> = { a, b, c -> map(a, b, c, fn) }
    inline fun <A, B, C, D> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, crossinline fn: (A, B, C) -> D): DiscreteProfile<D> = map(a, b, c, curry(fn))
    inline fun <A, B, C, D> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, crossinline fn: (A) -> (B) -> (C) -> D): DiscreteProfile<D> = apply(c, map(a, b, fn))
    inline fun <A, B, C, D, E> map(crossinline fn: (A, B, C, D) -> E): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>) -> DiscreteProfile<E> = { a, b, c, d -> map(a, b, c, d, fn) }
    inline fun <A, B, C, D, E> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, crossinline fn: (A, B, C, D) -> E): DiscreteProfile<E> = map(a, b, c, d, curry(fn))
    inline fun <A, B, C, D, E> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, crossinline fn: (A) -> (B) -> (C) -> (D) -> E): DiscreteProfile<E> = apply(d, map(a, b, c, fn))
    inline fun <A, B, C, D, E, F> map(crossinline fn: (A, B, C, D, E) -> F): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>, DiscreteProfile<E>) -> DiscreteProfile<F> = { a, b, c, d, e -> map(a, b, c, d, e, fn) }
    inline fun <A, B, C, D, E, F> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, crossinline fn: (A, B, C, D, E) -> F): DiscreteProfile<F> = map(a, b, c, d, e, curry(fn))
    inline fun <A, B, C, D, E, F> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> F): DiscreteProfile<F> = apply(e, map(a, b, c, d, fn))
    inline fun <A, B, C, D, E, F, G> map(crossinline fn: (A, B, C, D, E, F) -> G): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>, DiscreteProfile<E>, DiscreteProfile<F>) -> DiscreteProfile<G> = { a, b, c, d, e, f -> map(a, b, c, d, e, f, fn) }
    inline fun <A, B, C, D, E, F, G> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, crossinline fn: (A, B, C, D, E, F) -> G): DiscreteProfile<G> = map(a, b, c, d, e, f, curry(fn))
    inline fun <A, B, C, D, E, F, G> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> G): DiscreteProfile<G> = apply(f, map(a, b, c, d, e, fn))
    inline fun <A, B, C, D, E, F, G, H> map(crossinline fn: (A, B, C, D, E, F, G) -> H): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>, DiscreteProfile<E>, DiscreteProfile<F>, DiscreteProfile<G>) -> DiscreteProfile<H> = { a, b, c, d, e, f, g -> map(a, b, c, d, e, f, g, fn) }
    inline fun <A, B, C, D, E, F, G, H> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, crossinline fn: (A, B, C, D, E, F, G) -> H): DiscreteProfile<H> = map(a, b, c, d, e, f, g, curry(fn))
    inline fun <A, B, C, D, E, F, G, H> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> H): DiscreteProfile<H> = apply(g, map(a, b, c, d, e, f, fn))
    inline fun <A, B, C, D, E, F, G, H, I> map(crossinline fn: (A, B, C, D, E, F, G, H) -> I): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>, DiscreteProfile<E>, DiscreteProfile<F>, DiscreteProfile<G>, DiscreteProfile<H>) -> DiscreteProfile<I> = { a, b, c, d, e, f, g, h -> map(a, b, c, d, e, f, g, h, fn) }
    inline fun <A, B, C, D, E, F, G, H, I> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, h: DiscreteProfile<H>, crossinline fn: (A, B, C, D, E, F, G, H) -> I): DiscreteProfile<I> = map(a, b, c, d, e, f, g, h, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, h: DiscreteProfile<H>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> I): DiscreteProfile<I> = apply(h, map(a, b, c, d, e, f, g, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> map(crossinline fn: (A, B, C, D, E, F, G, H, I) -> J): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>, DiscreteProfile<E>, DiscreteProfile<F>, DiscreteProfile<G>, DiscreteProfile<H>, DiscreteProfile<I>) -> DiscreteProfile<J> = { a, b, c, d, e, f, g, h, i -> map(a, b, c, d, e, f, g, h, i, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, h: DiscreteProfile<H>, i: DiscreteProfile<I>, crossinline fn: (A, B, C, D, E, F, G, H, I) -> J): DiscreteProfile<J> = map(a, b, c, d, e, f, g, h, i, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, h: DiscreteProfile<H>, i: DiscreteProfile<I>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> J): DiscreteProfile<J> = apply(i, map(a, b, c, d, e, f, g, h, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> map(crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> K): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>, DiscreteProfile<E>, DiscreteProfile<F>, DiscreteProfile<G>, DiscreteProfile<H>, DiscreteProfile<I>, DiscreteProfile<J>) -> DiscreteProfile<K> = { a, b, c, d, e, f, g, h, i, j -> map(a, b, c, d, e, f, g, h, i, j, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J, K> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, h: DiscreteProfile<H>, i: DiscreteProfile<I>, j: DiscreteProfile<J>, crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> K): DiscreteProfile<K> = map(a, b, c, d, e, f, g, h, i, j, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> map(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, h: DiscreteProfile<H>, i: DiscreteProfile<I>, j: DiscreteProfile<J>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> (J) -> K): DiscreteProfile<K> = apply(j, map(a, b, c, d, e, f, g, h, i, fn))
    // Auxiliary bind
    inline fun <A, B, C> bind(crossinline fn: (A, B) -> DiscreteProfile<C>): (DiscreteProfile<A>, DiscreteProfile<B>) -> DiscreteProfile<C> = { a, b -> bind(a, b, fn) }
    inline fun <A, B, C> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, crossinline fn: (A, B) -> DiscreteProfile<C>): DiscreteProfile<C> = bind(a, b, curry(fn))
    inline fun <A, B, C> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, crossinline fn: (A) -> (B) -> DiscreteProfile<C>): DiscreteProfile<C> = join(map(a, b, fn))
    inline fun <A, B, C, D> bind(crossinline fn: (A, B, C) -> DiscreteProfile<D>): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>) -> DiscreteProfile<D> = { a, b, c -> bind(a, b, c, fn) }
    inline fun <A, B, C, D> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, crossinline fn: (A, B, C) -> DiscreteProfile<D>): DiscreteProfile<D> = bind(a, b, c, curry(fn))
    inline fun <A, B, C, D> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, crossinline fn: (A) -> (B) -> (C) -> DiscreteProfile<D>): DiscreteProfile<D> = join(map(a, b, c, fn))
    inline fun <A, B, C, D, E> bind(crossinline fn: (A, B, C, D) -> DiscreteProfile<E>): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>) -> DiscreteProfile<E> = { a, b, c, d -> bind(a, b, c, d, fn) }
    inline fun <A, B, C, D, E> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, crossinline fn: (A, B, C, D) -> DiscreteProfile<E>): DiscreteProfile<E> = bind(a, b, c, d, curry(fn))
    inline fun <A, B, C, D, E> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, crossinline fn: (A) -> (B) -> (C) -> (D) -> DiscreteProfile<E>): DiscreteProfile<E> = join(map(a, b, c, d, fn))
    inline fun <A, B, C, D, E, F> bind(crossinline fn: (A, B, C, D, E) -> DiscreteProfile<F>): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>, DiscreteProfile<E>) -> DiscreteProfile<F> = { a, b, c, d, e -> bind(a, b, c, d, e, fn) }
    inline fun <A, B, C, D, E, F> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, crossinline fn: (A, B, C, D, E) -> DiscreteProfile<F>): DiscreteProfile<F> = bind(a, b, c, d, e, curry(fn))
    inline fun <A, B, C, D, E, F> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> DiscreteProfile<F>): DiscreteProfile<F> = join(map(a, b, c, d, e, fn))
    inline fun <A, B, C, D, E, F, G> bind(crossinline fn: (A, B, C, D, E, F) -> DiscreteProfile<G>): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>, DiscreteProfile<E>, DiscreteProfile<F>) -> DiscreteProfile<G> = { a, b, c, d, e, f -> bind(a, b, c, d, e, f, fn) }
    inline fun <A, B, C, D, E, F, G> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, crossinline fn: (A, B, C, D, E, F) -> DiscreteProfile<G>): DiscreteProfile<G> = bind(a, b, c, d, e, f, curry(fn))
    inline fun <A, B, C, D, E, F, G> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> DiscreteProfile<G>): DiscreteProfile<G> = join(map(a, b, c, d, e, f, fn))
    inline fun <A, B, C, D, E, F, G, H> bind(crossinline fn: (A, B, C, D, E, F, G) -> DiscreteProfile<H>): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>, DiscreteProfile<E>, DiscreteProfile<F>, DiscreteProfile<G>) -> DiscreteProfile<H> = { a, b, c, d, e, f, g -> bind(a, b, c, d, e, f, g, fn) }
    inline fun <A, B, C, D, E, F, G, H> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, crossinline fn: (A, B, C, D, E, F, G) -> DiscreteProfile<H>): DiscreteProfile<H> = bind(a, b, c, d, e, f, g, curry(fn))
    inline fun <A, B, C, D, E, F, G, H> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> DiscreteProfile<H>): DiscreteProfile<H> = join(map(a, b, c, d, e, f, g, fn))
    inline fun <A, B, C, D, E, F, G, H, I> bind(crossinline fn: (A, B, C, D, E, F, G, H) -> DiscreteProfile<I>): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>, DiscreteProfile<E>, DiscreteProfile<F>, DiscreteProfile<G>, DiscreteProfile<H>) -> DiscreteProfile<I> = { a, b, c, d, e, f, g, h -> bind(a, b, c, d, e, f, g, h, fn) }
    inline fun <A, B, C, D, E, F, G, H, I> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, h: DiscreteProfile<H>, crossinline fn: (A, B, C, D, E, F, G, H) -> DiscreteProfile<I>): DiscreteProfile<I> = bind(a, b, c, d, e, f, g, h, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, h: DiscreteProfile<H>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> DiscreteProfile<I>): DiscreteProfile<I> = join(map(a, b, c, d, e, f, g, h, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> bind(crossinline fn: (A, B, C, D, E, F, G, H, I) -> DiscreteProfile<J>): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>, DiscreteProfile<E>, DiscreteProfile<F>, DiscreteProfile<G>, DiscreteProfile<H>, DiscreteProfile<I>) -> DiscreteProfile<J> = { a, b, c, d, e, f, g, h, i -> bind(a, b, c, d, e, f, g, h, i, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, h: DiscreteProfile<H>, i: DiscreteProfile<I>, crossinline fn: (A, B, C, D, E, F, G, H, I) -> DiscreteProfile<J>): DiscreteProfile<J> = bind(a, b, c, d, e, f, g, h, i, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, h: DiscreteProfile<H>, i: DiscreteProfile<I>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> DiscreteProfile<J>): DiscreteProfile<J> = join(map(a, b, c, d, e, f, g, h, i, fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> bind(crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> DiscreteProfile<K>): (DiscreteProfile<A>, DiscreteProfile<B>, DiscreteProfile<C>, DiscreteProfile<D>, DiscreteProfile<E>, DiscreteProfile<F>, DiscreteProfile<G>, DiscreteProfile<H>, DiscreteProfile<I>, DiscreteProfile<J>) -> DiscreteProfile<K> = { a, b, c, d, e, f, g, h, i, j -> bind(a, b, c, d, e, f, g, h, i, j, fn) }
    inline fun <A, B, C, D, E, F, G, H, I, J, K> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, h: DiscreteProfile<H>, i: DiscreteProfile<I>, j: DiscreteProfile<J>, crossinline fn: (A, B, C, D, E, F, G, H, I, J) -> DiscreteProfile<K>): DiscreteProfile<K> = bind(a, b, c, d, e, f, g, h, i, j, curry(fn))
    inline fun <A, B, C, D, E, F, G, H, I, J, K> bind(a: DiscreteProfile<A>, b: DiscreteProfile<B>, c: DiscreteProfile<C>, d: DiscreteProfile<D>, e: DiscreteProfile<E>, f: DiscreteProfile<F>, g: DiscreteProfile<G>, h: DiscreteProfile<H>, i: DiscreteProfile<I>, j: DiscreteProfile<J>, crossinline fn: (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> (G) -> (H) -> (I) -> (J) -> DiscreteProfile<K>): DiscreteProfile<K> = join(map(a, b, c, d, e, f, g, h, i, j, fn))
}